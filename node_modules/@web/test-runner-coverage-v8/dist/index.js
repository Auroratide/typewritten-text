"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.v8ToIstanbul = void 0;
const path_1 = require("path");
const v8_to_istanbul_1 = __importDefault(require("v8-to-istanbul"));
const test_runner_core_1 = require("@web/test-runner-core");
const picomatch_1 = __importDefault(require("picomatch"));
const utils_1 = require("./utils");
const cachedMatchers = new Map();
// coverage base dir must be separated with "/"
const coverageBaseDir = process.cwd().split(path_1.sep).join('/');
function getMatcher(patterns) {
    if (!patterns || patterns.length === 0) {
        return () => true;
    }
    const key = patterns.join('');
    let matcher = cachedMatchers.get(key);
    if (!matcher) {
        const resolvedPatterns = patterns.map(pattern => !path_1.isAbsolute(pattern) && !pattern.startsWith('*')
            ? path_1.posix.join(coverageBaseDir, pattern)
            : pattern);
        matcher = picomatch_1.default(resolvedPatterns);
        cachedMatchers.set(key, matcher);
    }
    return matcher;
}
async function v8ToIstanbul(config, testFiles, coverage, userAgent) {
    var _a, _b;
    const included = getMatcher((_a = config === null || config === void 0 ? void 0 : config.coverageConfig) === null || _a === void 0 ? void 0 : _a.include);
    const excluded = getMatcher((_b = config === null || config === void 0 ? void 0 : config.coverageConfig) === null || _b === void 0 ? void 0 : _b.exclude);
    const istanbulCoverage = {};
    for (const entry of coverage) {
        const url = new URL(entry.url);
        const path = url.pathname;
        if (
        // ignore non-http protocols (for exmaple webpack://)
        url.protocol.startsWith('http') &&
            // ignore non-files
            !!path_1.extname(path) &&
            // ignore virtual files
            !path.startsWith('/__web-test-runner') &&
            !path.startsWith('/__web-dev-server')) {
            try {
                const sources = await test_runner_core_1.fetchSourceMap({
                    protocol: config.protocol,
                    host: config.hostname,
                    port: config.port,
                    browserUrl: `${url.pathname}${url.search}${url.hash}`,
                    userAgent,
                });
                const filePath = path_1.join(config.rootDir, utils_1.toFilePath(path));
                if (!testFiles.includes(filePath) && included(filePath) && !excluded(filePath)) {
                    const converter = v8_to_istanbul_1.default(filePath, 0, sources);
                    await converter.load();
                    converter.applyCoverage(entry.functions);
                    Object.assign(istanbulCoverage, converter.toIstanbul());
                }
            }
            catch (error) {
                console.error(`Error while generating code coverage for ${entry.url}.`);
                console.error(error);
            }
        }
    }
    return istanbulCoverage;
}
exports.v8ToIstanbul = v8ToIstanbul;
//# sourceMappingURL=index.js.map